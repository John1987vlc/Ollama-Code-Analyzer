{
  "name": "ollama-code-analyzer",
  "displayName": "Ollama Code Analyzer",
  "description": "Your private AI co-pilot for code analysis. Use powerful local model Gemma3n through Ollama to analyze, refactor, explain, and generate code without ever sending it to the cloud. Privacy-first, offline-capable, and fully integrated into your VS Code workflow.",
  "publisher": "ollama-code-analyzer-Gemma3n",
  "version": "1.0.0",
  "icon": "images/icon.png",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Machine Learning",
    "Education",
    "Other"
  ],
  "keywords": [
    "ollama",
    "ai",
    "gemma",
    "llama",
    "local ai",
    "privacy",
    "security",
    "offline",
    "code analysis",
    "linter",
    "static analysis",
    "refactoring",
    "code generation",
    "unit testing",
    "explain code",
    "UML",
    "suggestions"
  ],
  "activationEvents": [
    "onLanguage:csharp",
    "onLanguage:javascript",
    "onLanguage:typescript",
    "onLanguage:python",
    "onLanguage:java",
    "onLanguage:cpp",
    "onLanguage:c",
    "onLanguage:sql"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "ollamaCodeAnalyzer.analyzeCurrentDocument",
        "title": "%command.analyzeCurrentDocument.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.configureModel",
        "title": "%command.configureModel.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.generateCodeFromComment",
        "title": "%command.generateCodeFromComment.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.findSuggestions",
        "title": "%command.findSuggestions.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.conceptualRefactor",
        "title": "%command.conceptualRefactor.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.explainCode",
        "title": "%command.explainCode.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.checkCompanyStandards",
        "title": "%command.checkCompanyStandards.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.generateUnitTest",
        "title": "%command.generateUnitTest.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.findDuplicateLogic",
        "title": "%command.findDuplicateLogic.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.generateUmlDiagram",
        "title": "%command.generateUmlDiagram.title%",
        "category": "Ollama Code Analyzer"
      },
      {
        "command": "ollamaCodeAnalyzer.configureLanguage",
        "title": "%command.configureLanguage.title%",
        "category": "Gemma3n Analysis"
      },
      {
        "command": "ollamaCodeAnalyzer.checkProjectStandards",
        "title": "%command.checkProjectStandards.title%",
        "category": "Gemma3n Analysis"
      }
    ],
    "submenus": [
      {
        "id": "gemma3nAnalysisSubmenu",
        "label": "Gemma3n Analysis"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "submenu": "gemma3nAnalysisSubmenu",
          "group": "navigation@1",
          "when": "editorTextFocus"
        }
      ],
      "gemma3nAnalysisSubmenu": [
        {
          "command": "ollamaCodeAnalyzer.conceptualRefactor",
          "group": "1_selection@1",
          "when": "editorHasSelection"
        },
        {
          "command": "ollamaCodeAnalyzer.explainCode",
          "group": "1_selection@2",
          "when": "editorHasSelection"
        },
        {
          "command": "ollamaCodeAnalyzer.generateUnitTest",
          "group": "1_selection@3",
          "when": "editorHasSelection"
        },
        {
          "command": "ollamaCodeAnalyzer.analyzeCurrentDocument",
          "group": "2_file@1"
        },
        {
          "command": "ollamaCodeAnalyzer.checkCompanyStandards",
          "group": "2_file@2"
        },
        {
          "command": "ollamaCodeAnalyzer.findSuggestions",
          "group": "2_file@3"
        },
        {
          "command": "ollamaCodeAnalyzer.findDuplicateLogic",
          "group": "2_file@4"
        },
        {
          "command": "ollamaCodeAnalyzer.generateCodeFromComment",
          "group": "2_file@5"
        },
        {
          "command": "ollamaCodeAnalyzer.generateUmlDiagram",
          "group": "3_project@1"
        },
        {
          "command": "ollamaCodeAnalyzer.checkProjectStandards",
          "group": "3_project@2"
        },
        {
          "command": "ollamaCodeAnalyzer.configureModel",
          "group": "4_configuration@1"
        }
      ]
    },
    "configuration": {
      "title": "Ollama Code Analyzer",
      "properties": {
        "ollamaCodeAnalyzer.baseUrl": {
          "type": "string",
          "default": "http://localhost:11434",
          "description": "%config.baseUrl.description%"
        },
        "ollamaCodeAnalyzer.model": {
          "type": "string",
          "default": "gemma3n:latest",
          "description": "LLM Model used in ollama."
        },
        "ollamaCodeAnalyzer.supportedLanguages": {
          "type": "array",
          "default": [
            "csharp",
            "javascript",
            "typescript",
            "python",
            "java",
            "sql"
          ],
          "description": "The programming languages that will be analyzed by the extension."
        },
        "ollamaCodeAnalyzer.maxLines": {
          "type": "number",
          "default": 2000,
          "description": "The maximum number of lines a file can have to be analyzed."
        },
        "ollamaCodeAnalyzer.analyzeOnOpen": {
          "type": "boolean",
          "default": false,
          "description": "Automatically analyze a file when it is opened."
        },
        "ollamaCodeAnalyzer.analyzeOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Automatically analyze a file when it is saved."
        },
        "ollamaCodeAnalyzer.autoAnalyze": {
          "type": "boolean",
          "default": false,
          "description": "Automatically analyze a file as you type."
        },
        "ollamaCodeAnalyzer.timeout": {
          "type": "number",
          "default": 45000,
          "description": "Maximum wait time (in ms) for responses from Ollama."
        }
      }
    }
  },
  "scripts": {
    "clean": "npx rimraf logs out && del /q *.vsix 2>NUL",
    "generate-nls": "node ./scripts/generate-nls.js",
    "compile": "npm run generate-nls && tsc -p ./",
    "build": "npm run generate-nls && tsc -p ./ && cpx \"src/prompts/**/*.json\" out/prompts && cpx \"src/ui/media/*\" out/media && cpx \"src/internationalization/**/*.json\" out/internationalization",
    "vscode:prepublish": "npm run clean && npm run build",
    "watch:tsc": "tsc -watch -p ./",
    "watch:media": "cpx \"src/ui/media/*\" out/media --watch",
    "watch": "npm-run-all -p watch:tsc watch:media",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/markdown-it": "^14.1.2",
    "@types/mocha": "^10.0.10",
    "@types/node": "16.x",
    "@types/node-fetch": "^2.6.12",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.5.2",
    "cpx": "^1.5.0",
    "eslint": "^8.57.0",
    "mocha": "^11.7.1",
    "npm-run-all": "^4.1.5",
    "rimraf": "^5.0.0",
    "ts-node": "^10.9.2",
    "typescript": "^4.9.5"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/John1987vlc/Ollama-Code-Analyzer.git"
  },
  "bugs": {
    "url": "https://github.com/John1987vlc/Ollama-Code-Analyzer/issues"
  },
  "homepage": "https://github.com/John1987vlc/Ollama-Code-Analyzer#readme",
  "license": "CC0-1.0",
  "dependencies": {
    "@kazumatu981/markdown-it-kroki": "^1.3.6",
    "@vscode/test-cli": "^0.0.11",
    "markdown-it": "^14.1.0",
    "node-fetch": "^2.7.0",
    "node-plantuml": "^0.9.0"
  }
}
